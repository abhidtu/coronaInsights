/*
 * This file is generated by jOOQ.
 */
package com.corona.insights.jooq.corona_insights.tables;


import com.corona.insights.jooq.corona_insights.CoronaInsights;
import com.corona.insights.jooq.corona_insights.Indexes;
import com.corona.insights.jooq.corona_insights.Keys;
import com.corona.insights.jooq.corona_insights.tables.records.LocationRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Location extends TableImpl<LocationRecord> {

    private static final long serialVersionUID = 492287241;

    /**
     * The reference instance of <code>corona_insights.location</code>
     */
    public static final Location LOCATION = new Location();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LocationRecord> getRecordType() {
        return LocationRecord.class;
    }

    /**
     * The column <code>corona_insights.location.id</code>.
     */
    public final TableField<LocationRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>corona_insights.location.country</code>.
     */
    public final TableField<LocationRecord, String> COUNTRY = createField("country", org.jooq.impl.SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>corona_insights.location.state</code>.
     */
    public final TableField<LocationRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.VARCHAR(250), this, "");

    /**
     * The column <code>corona_insights.location.latitude</code>.
     */
    public final TableField<LocationRecord, BigDecimal> LATITUDE = createField("latitude", org.jooq.impl.SQLDataType.DECIMAL(10, 5), this, "");

    /**
     * The column <code>corona_insights.location.longitude</code>.
     */
    public final TableField<LocationRecord, BigDecimal> LONGITUDE = createField("longitude", org.jooq.impl.SQLDataType.DECIMAL(10, 5), this, "");

    /**
     * The column <code>corona_insights.location.file_name</code>.
     */
    public final TableField<LocationRecord, String> FILE_NAME = createField("file_name", org.jooq.impl.SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>corona_insights.location.created_at</code>.
     */
    public final TableField<LocationRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>corona_insights.location.modified_at</code>.
     */
    public final TableField<LocationRecord, Timestamp> MODIFIED_AT = createField("modified_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>corona_insights.location</code> table reference
     */
    public Location() {
        this(DSL.name("location"), null);
    }

    /**
     * Create an aliased <code>corona_insights.location</code> table reference
     */
    public Location(String alias) {
        this(DSL.name(alias), LOCATION);
    }

    /**
     * Create an aliased <code>corona_insights.location</code> table reference
     */
    public Location(Name alias) {
        this(alias, LOCATION);
    }

    private Location(Name alias, Table<LocationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Location(Name alias, Table<LocationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Location(Table<O> child, ForeignKey<O, LocationRecord> key) {
        super(child, key, LOCATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CoronaInsights.CORONA_INSIGHTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LOCATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LocationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LOCATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LocationRecord> getPrimaryKey() {
        return Keys.KEY_LOCATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LocationRecord>> getKeys() {
        return Arrays.<UniqueKey<LocationRecord>>asList(Keys.KEY_LOCATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Location as(String alias) {
        return new Location(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Location as(Name alias) {
        return new Location(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(String name) {
        return new Location(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(Name name) {
        return new Location(name, null);
    }
}
