/*
 * This file is generated by jOOQ.
 */
package com.corona.insights.jooq.corona_insights.tables;


import com.corona.insights.jooq.corona_insights.CoronaInsights;
import com.corona.insights.jooq.corona_insights.Indexes;
import com.corona.insights.jooq.corona_insights.Keys;
import com.corona.insights.jooq.corona_insights.tables.records.StateCodeNameMappingRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StateCodeNameMapping extends TableImpl<StateCodeNameMappingRecord> {

    private static final long serialVersionUID = 187179828;

    /**
     * The reference instance of <code>corona_insights.state_code_name_mapping</code>
     */
    public static final StateCodeNameMapping STATE_CODE_NAME_MAPPING = new StateCodeNameMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StateCodeNameMappingRecord> getRecordType() {
        return StateCodeNameMappingRecord.class;
    }

    /**
     * The column <code>corona_insights.state_code_name_mapping.State</code>.
     */
    public final TableField<StateCodeNameMappingRecord, String> STATE = createField("State", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>corona_insights.state_code_name_mapping.Abbrev</code>.
     */
    public final TableField<StateCodeNameMappingRecord, String> ABBREV = createField("Abbrev", org.jooq.impl.SQLDataType.VARCHAR(6).nullable(false), this, "");

    /**
     * The column <code>corona_insights.state_code_name_mapping.Code</code>.
     */
    public final TableField<StateCodeNameMappingRecord, String> CODE = createField("Code", org.jooq.impl.SQLDataType.VARCHAR(2).nullable(false), this, "");

    /**
     * Create a <code>corona_insights.state_code_name_mapping</code> table reference
     */
    public StateCodeNameMapping() {
        this(DSL.name("state_code_name_mapping"), null);
    }

    /**
     * Create an aliased <code>corona_insights.state_code_name_mapping</code> table reference
     */
    public StateCodeNameMapping(String alias) {
        this(DSL.name(alias), STATE_CODE_NAME_MAPPING);
    }

    /**
     * Create an aliased <code>corona_insights.state_code_name_mapping</code> table reference
     */
    public StateCodeNameMapping(Name alias) {
        this(alias, STATE_CODE_NAME_MAPPING);
    }

    private StateCodeNameMapping(Name alias, Table<StateCodeNameMappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private StateCodeNameMapping(Name alias, Table<StateCodeNameMappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> StateCodeNameMapping(Table<O> child, ForeignKey<O, StateCodeNameMappingRecord> key) {
        super(child, key, STATE_CODE_NAME_MAPPING);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CoronaInsights.CORONA_INSIGHTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STATE_CODE_NAME_MAPPING_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StateCodeNameMappingRecord> getPrimaryKey() {
        return Keys.KEY_STATE_CODE_NAME_MAPPING_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StateCodeNameMappingRecord>> getKeys() {
        return Arrays.<UniqueKey<StateCodeNameMappingRecord>>asList(Keys.KEY_STATE_CODE_NAME_MAPPING_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StateCodeNameMapping as(String alias) {
        return new StateCodeNameMapping(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StateCodeNameMapping as(Name alias) {
        return new StateCodeNameMapping(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StateCodeNameMapping rename(String name) {
        return new StateCodeNameMapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StateCodeNameMapping rename(Name name) {
        return new StateCodeNameMapping(name, null);
    }
}
