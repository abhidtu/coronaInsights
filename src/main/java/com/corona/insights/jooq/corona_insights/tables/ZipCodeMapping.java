/*
 * This file is generated by jOOQ.
 */
package com.corona.insights.jooq.corona_insights.tables;


import com.corona.insights.jooq.corona_insights.CoronaInsights;
import com.corona.insights.jooq.corona_insights.Indexes;
import com.corona.insights.jooq.corona_insights.Keys;
import com.corona.insights.jooq.corona_insights.tables.records.ZipCodeMappingRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ZipCodeMapping extends TableImpl<ZipCodeMappingRecord> {

    private static final long serialVersionUID = -68643530;

    /**
     * The reference instance of <code>corona_insights.zip_code_mapping</code>
     */
    public static final ZipCodeMapping ZIP_CODE_MAPPING = new ZipCodeMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ZipCodeMappingRecord> getRecordType() {
        return ZipCodeMappingRecord.class;
    }

    /**
     * The column <code>corona_insights.zip_code_mapping.Zip</code>.
     */
    public final TableField<ZipCodeMappingRecord, Integer> ZIP = createField("Zip", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>corona_insights.zip_code_mapping.City</code>.
     */
    public final TableField<ZipCodeMappingRecord, String> CITY = createField("City", org.jooq.impl.SQLDataType.VARCHAR(26).nullable(false), this, "");

    /**
     * The column <code>corona_insights.zip_code_mapping.State</code>.
     */
    public final TableField<ZipCodeMappingRecord, String> STATE = createField("State", org.jooq.impl.SQLDataType.VARCHAR(2).nullable(false), this, "");

    /**
     * The column <code>corona_insights.zip_code_mapping.Latitude</code>.
     */
    public final TableField<ZipCodeMappingRecord, BigDecimal> LATITUDE = createField("Latitude", org.jooq.impl.SQLDataType.DECIMAL(18, 5).nullable(false), this, "");

    /**
     * The column <code>corona_insights.zip_code_mapping.Longitude</code>.
     */
    public final TableField<ZipCodeMappingRecord, BigDecimal> LONGITUDE = createField("Longitude", org.jooq.impl.SQLDataType.DECIMAL(19, 5).nullable(false), this, "");

    /**
     * The column <code>corona_insights.zip_code_mapping.Timezone</code>.
     */
    public final TableField<ZipCodeMappingRecord, Integer> TIMEZONE = createField("Timezone", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>corona_insights.zip_code_mapping.Daylight_savings_time_flag</code>.
     */
    public final TableField<ZipCodeMappingRecord, Boolean> DAYLIGHT_SAVINGS_TIME_FLAG = createField("Daylight_savings_time_flag", org.jooq.impl.SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>corona_insights.zip_code_mapping.geopoint</code>.
     */
    public final TableField<ZipCodeMappingRecord, String> GEOPOINT = createField("geopoint", org.jooq.impl.SQLDataType.VARCHAR(21).nullable(false), this, "");

    /**
     * The column <code>corona_insights.zip_code_mapping.state_name</code>.
     */
    public final TableField<ZipCodeMappingRecord, String> STATE_NAME = createField("state_name", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * Create a <code>corona_insights.zip_code_mapping</code> table reference
     */
    public ZipCodeMapping() {
        this(DSL.name("zip_code_mapping"), null);
    }

    /**
     * Create an aliased <code>corona_insights.zip_code_mapping</code> table reference
     */
    public ZipCodeMapping(String alias) {
        this(DSL.name(alias), ZIP_CODE_MAPPING);
    }

    /**
     * Create an aliased <code>corona_insights.zip_code_mapping</code> table reference
     */
    public ZipCodeMapping(Name alias) {
        this(alias, ZIP_CODE_MAPPING);
    }

    private ZipCodeMapping(Name alias, Table<ZipCodeMappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private ZipCodeMapping(Name alias, Table<ZipCodeMappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ZipCodeMapping(Table<O> child, ForeignKey<O, ZipCodeMappingRecord> key) {
        super(child, key, ZIP_CODE_MAPPING);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CoronaInsights.CORONA_INSIGHTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ZIP_CODE_MAPPING_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ZipCodeMappingRecord> getPrimaryKey() {
        return Keys.KEY_ZIP_CODE_MAPPING_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ZipCodeMappingRecord>> getKeys() {
        return Arrays.<UniqueKey<ZipCodeMappingRecord>>asList(Keys.KEY_ZIP_CODE_MAPPING_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ZipCodeMapping as(String alias) {
        return new ZipCodeMapping(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ZipCodeMapping as(Name alias) {
        return new ZipCodeMapping(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipCodeMapping rename(String name) {
        return new ZipCodeMapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipCodeMapping rename(Name name) {
        return new ZipCodeMapping(name, null);
    }
}
