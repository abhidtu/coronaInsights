/*
 * This file is generated by jOOQ.
 */
package com.corona.insights.jooq.corona_insights.tables.pojos;


import java.io.Serializable;

import javax.annotation.Generated;

import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StateCodeNameMapping implements Serializable {

    private static final long serialVersionUID = 1576604239;

    private UInteger id;
    private String   state;
    private String   abbrev;
    private String   code;

    public StateCodeNameMapping() {}

    public StateCodeNameMapping(StateCodeNameMapping value) {
        this.id = value.id;
        this.state = value.state;
        this.abbrev = value.abbrev;
        this.code = value.code;
    }

    public StateCodeNameMapping(
        UInteger id,
        String   state,
        String   abbrev,
        String   code
    ) {
        this.id = id;
        this.state = state;
        this.abbrev = abbrev;
        this.code = code;
    }

    public UInteger getId() {
        return this.id;
    }

    public StateCodeNameMapping setId(UInteger id) {
        this.id = id;
        return this;
    }

    public String getState() {
        return this.state;
    }

    public StateCodeNameMapping setState(String state) {
        this.state = state;
        return this;
    }

    public String getAbbrev() {
        return this.abbrev;
    }

    public StateCodeNameMapping setAbbrev(String abbrev) {
        this.abbrev = abbrev;
        return this;
    }

    public String getCode() {
        return this.code;
    }

    public StateCodeNameMapping setCode(String code) {
        this.code = code;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("StateCodeNameMapping (");

        sb.append(id);
        sb.append(", ").append(state);
        sb.append(", ").append(abbrev);
        sb.append(", ").append(code);

        sb.append(")");
        return sb.toString();
    }
}
